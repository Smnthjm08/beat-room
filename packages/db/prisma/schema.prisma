generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  sessions     Session[]
  accounts     Account[]
  stream       Stream[]
  upvotes      Upvote[]
  hostedSpaces Space[]   @relation("hostedBy")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum StreamType {
  Spotify
  Youtube
}

model Space {
  id        String   @id @default(uuid())
  title     String   @default("")
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  streams Stream[] @relation("spaceStreams")

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], name: "hostedBy")

  @@map("space")
}

model Stream {
  id     String     @id @default(uuid())
  type   StreamType
  active Boolean    @default(true)
  Upvote Upvote[]

  spaceId String
  space   Space  @relation(references: [id], fields: [spaceId], name: "spaceStreams")

  addedById String
  user      User   @relation(references: [id], fields: [addedById])

  @@map("stream")
}

model Upvote {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  streamId String
  stream   Stream @relation(fields: [streamId], references: [id])

  @@unique([userId, streamId])
  @@map("upvote")
}
